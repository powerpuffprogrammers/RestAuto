package interfaces;

//LAST CODED BY: CHRISTINA SEGERHOLM ON 2/24

import java.util.ArrayList;
import java.util.HashMap;

import dataBaseC.Table;
import databaseB.Dish;
import databaseB.Ingredient;
import databaseB.Ticket;
import messageController.Message;
import messageController.RecieverInfo;
import messageController.SenderInfo;

//Starts the DB B
public class ChefInterface {
	
	//Maps Ingredient Name to Ingredient
	private HashMap<String, Ingredient> inventory;
	
	//Ticket Queue = holds all ticket orders
	private ArrayList<Ticket> ticketQueue;
	
	public ChefInterface(){
		//Pull this from SQL
		inventory = new HashMap<String, Ingredient>();
		ticketQueue = new ArrayList<Ticket>();
	}
	
	//adds ingredient to inventory returns false if ingredient already exists
	public boolean addIngredientToInventory(String ingredientName,Double amountLeft, String unitOfAmount, Double threshold ){
		if(inventory.containsKey(ingredientName)){
			return false;
		}
		inventory.put(ingredientName, new Ingredient(ingredientName, amountLeft, unitOfAmount, threshold));
		return true;
	}
	
	
	public void chefTicketListener(Ticket ticket){
		if(ticket!=null){
			ticketQueue.add(ticket);
		}
	}

	public void orderTicketQ(){
		//put it in order
		//updateScreen()
	}
	
//handles all the host actions (like pushing buttons) and updates the screen and list of tables correctly
	public void chefEventListenter(HostEvent e){
		//if event is a seating a table
		if(e.type == 's'){
			Table t = allTables.get(e.idOfTableNotification);
			if(t==null){
				return;
			}
			t.seat(e.waiterName);
			readyTables.remove(e.idOfTableNotification);
			notReadyTables.put(e.idOfTableNotification,t);
		}
		//changing status to ready
		else if(e.type == 'r'){
			Table t = allTables.get(e.idOfTableNotification);
			if(t==null){
				return;
			}
			t.setStatus('r');
			notReadyTables.remove(e.idOfTableNotification);
			readyTables.put(e.idOfTableNotification,t);
		}
		else if(e.type == 'n'){//if event is closing a notification
			pendingNotifications.remove(0);
		}
		//if event is sending a notification to manager
		else if(e.type == 'm'){
			hostMessageSender(new Message(new SenderInfo('h'), new RecieverInfo('m'), "Host Stand needs Assistance."));
		}
		
		redrawHostScreen();
		
	}        


//handles messages that it gets from manager or waiter
	public void chefMessageListener(Message m){	
		if(m.getSenderPosition() == 'w'){ //if waiter sent a message
			
		}            
		else if(m.getSenderPosition()== 'm'){//if manager sent the message = 
			    
		}
		redrawChefScreen();
	}

	private void redrawChefScreen() {
		// TODO Auto-generated method stub
		
	}


	
	//To implement:
//	public void changeDish(Dish d, char dishStatus);
	
//	public void removeIngredientToInventory(String ingredientName);
}
